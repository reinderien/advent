Code-gen to C and optimized compilation is not nearly enough to get the execution time down. Manual
interpretation of the program is necessary to find out what it's doing.

The dumb C codegen produced is:

            b = 67;	// set b 67
            c = b;	// set c b
            if (a != 0) goto l04;	// jnz a 2
            if (1 != 0) goto l08;	// jnz 1 5
    l04:	b *= 100;	// mul b 100
            b -= -100000;	// sub b -100000
            c = b;	// set c b
            c -= -17000;	// sub c -17000
    l08:	f = 1;	// set f 1
            d = 2;	// set d 2
    l10:	e = 2;	// set e 2
    l11:	g = d;	// set g d
            g *= e;	// mul g e
            g -= b;	// sub g b
            if (g != 0) goto l16;	// jnz g 2
            f = 0;	// set f 0
    l16:	e -= -1;	// sub e -1
            g = e;	// set g e
            g -= b;	// sub g b
            if (g != 0) goto l11;	// jnz g -8
            d -= -1;	// sub d -1
            g = d;	// set g d
            g -= b;	// sub g b
            if (g != 0) goto l10;	// jnz g -13
            if (f != 0) goto l26;	// jnz f 2
            h -= -1;	// sub h -1
    l26:	g = b;	// set g b
            g -= c;	// sub g c
            if (g != 0) goto l30;	// jnz g 2
            if (1 != 0) goto l32;	// jnz 1 3
    l30:	b -= -17;	// sub b -17
            if (1 != 0) goto l08;	// jnz 1 -23
    l32: ;

Perform the following basic optimizations:
- Constant variable evaluation and combination
- Constant jump condition evaluation and branch trimming
- Dropping temporary variables
- Double-negative cancellation

This is equivalent to:

    c = 123700;  // set c b
    for (b = 106700;; b += 17) {	// sub b -17
        f = 1;	     // set f 1
        d = 2;	     // set d 2
        do {
            e = 2;	 // set e 2

            do {
                if (d*e - b == 0)  // jnz g 2
                    f = 0;         // set f 0
                e++;               // sub e -1
            } while (e - b != 0);  // jnz g -8

            d++;    	        // sub d -1
        } while (d - b != 0);	// jnz g -13

        if (f == 0) 	// jnz f 2
            h++;    	// sub h -1
        if (b - c == 0) // jnz g 2
            break;   	// jnz 1 3
    } // jnz 1 -23

Adding early loop termination on f, this is in turn equivalent to:

    int h = 0;

    for (int b = 106700; b != 123700; b += 17) {
        for (int d = 2; d != b; d++) {
            for (int e = 2; e != b; e++) {
                if (d*e == b) {
                    h++;
                    goto cont;
                }
            }
        }
        cont:
    }

We can now see what the code is doing. Variable purposes:

  a - Flag as to whether we're in part 1 (=0) or part 2 (=1)
  b - Outermost loop counter, checked if prime
  c - Upper value for b after which the outer loop terminates
  d - Next-inner loop counter, test factor 1
  e - Innermost loop counter, test factor 2
  f - Flag to indicate whether any factors have been found (=0) or whether b is prime (=1)
  g - Temporary variable for various calculations
  h - Counter to track number of primes found over program execution

The innermost match is a brute-force check whether b is prime. If b is prime, there will be no pair
of factors d and e for which their product equals b; f will never be cleared, and h will be
incremented. If b is non-prime, a pair of factors d and e will be found for which their product
equals b; f will be cleared, and h will not be incremented.

The real solution is to rewrite this as a saner prime-finding loop.
